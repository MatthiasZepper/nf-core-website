---
import AdvisoryListing from "@components/advisory/AdvisoryListing.svelte";
import PageLayout from "@layouts/PageLayout.astro";
import SidebarNav from "@components/sidebar/SidebarNav.astro";
import { type CollectionEntry } from "astro:content";
import type { SidebarEntry } from "@utils/types";

const { title, subtitle, advisories, currentFilters } = Astro.props;
export interface Props {
    title: string;
    subtitle: string;
    currentFilters: { name: string }[];
    advisories: CollectionEntry<"advisories">[];
}

advisories
    .sort((a, b) => {
        if (!a.data.publishDate || !b.data.publishDate) return 0;
        return a.data.publishDate.getTime();
    });

const searchAdvisories = (search) => {
    const searchTerms = search.toLowerCase().split(" ");
    return advisories.filter((advisory) => {
        const advisoryString = JSON.stringify(advisory.data).toLowerCase();
        return searchTerms.every((term) => advisoryString.includes(term));
    });
};

const filterAdvisories = (type) => {
    return advisories.filter((advisory) => advisory.data.type === type);
};

const currentAdvisory = advisories.filter((advisories) => {
    // Calculate date 3 months ago
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
    const threeMonthsAgoTime = threeMonthsAgo.getTime();

    // Check if advisory was published within the last 3 months
    const publishDateUnix = advisories.data.publishDate?.getTime();

    if (publishDateUnix && publishDateUnix >= threeMonthsAgoTime) {
        return true;
    }
});

const years = [...new Set(advisories.map((advisory) => advisory.data.publishDate.getFullYear()))].sort((a, b) => b - a);

const sections: SidebarEntry[] = years.map((year) => {
    return {
        type: "group",
        label: year.toString(),
        href: "#year-" + year,
        collapsed: true,
        entries: advisories
            .filter((advisory) => advisory.data.publishDate?.getFullYear() === year)
            .map((advisory) => {
                return {
                    type: "link",
                    label: advisory.data.title,
                    href: "#advisory-" + advisory.id,
                    isCurrent: false,
                };
            }),
    };
});
---

<PageLayout
    title={title || "Advisories"}
    subtitle={subtitle || "nf-core advisories and security announcements"}
    viewTransitions={true}
>
    <div class="row">
        <div class="col-12 col-md-2 sticky-top-under d-none d-md-inline sidebar-left pt-1">
            <SidebarNav items={sections} />
        </div>

        <div class="col">
            <AdvisoryListing {advisories} {currentFilters} client:load />
        </div>
    </div>
</PageLayout>
