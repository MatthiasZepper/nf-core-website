---
import LocalDateTime from "@components/event/LocalDateTime.svelte";
import { advisories_type_classes, advisories_type_icons } from "./advisoryUtils";
import GitHubProfilePictureExtended from "@components/GitHubProfilePictureExtended.svelte";
import {
    formatAdvisoryType,
    formatAdvisoryCategory,
    advisory_classes,
    advisory_icons,
    getAdvisoryMetadataItems,
} from "./advisoryUtils";

interface Props {
    frontmatter: {
        publishedDate: Date;
        severity: string;
        type: string[];
        category: string[];
        reporter: Array<string | Record<string, string>> | null;
        reviewer?: Array<string | Record<string, string>>;
        nextflowVersions?: string[] | null;
        nextflowExecutors?: string[] | null;
        softwareDependencies?: Array<string | { name: string; versions?: string[] }> | string | null;
    };
}

const { frontmatter } = Astro.props;
const metadataItems = getAdvisoryMetadataItems(frontmatter);

function getReporterInfo(reporter: string | Record<string, string>) {
    if (typeof reporter === "string") {
        return { username: reporter, affiliation: "" };
    }
    return { username: Object.keys(reporter)[0], affiliation: Object.values(reporter)[0] };
}

function getReviewerInfo(reviewer: string | Record<string, string>) {
    if (typeof reviewer === "string") {
        return { username: reviewer, affiliation: "" };
    }
    return { username: Object.keys(reviewer)[0], affiliation: Object.values(reviewer)[0] };
}
---

<div class="advisory-header">
    <div class="d-flex flex-column gap-4">
        <div class="d-flex justify-content-between align-items-start">
            <dl class="mb-0">
                <dt class="fw-semibold mb-1">Published</dt>
                <dd>{frontmatter.publishedDate.toLocaleDateString()}</dd>
            </dl>
        </div>

        <div>
            <dl class="mb-0">
                <dt class="fw-semibold mb-1">Severity</dt>
                <dd class="mb-3">
                    <span class={`badge bg-${advisory_classes[frontmatter.severity] || "secondary"}`}>
                        <i class={`${advisory_icons[frontmatter.severity] || "fa-circle-info"} me-1`}></i>
                        {formatAdvisoryCategory(frontmatter.severity)}
                    </span>
                </dd>

                <dt class="fw-semibold mb-1">Type</dt>
                <dd class="mb-3">
                    {
                        frontmatter.type.map((type) => (
                            <span class={`badge bg-${advisory_classes[type] || "secondary"} me-1`}>
                                <i class={`${advisory_icons[type] || "fa-circle-info"} me-1`} />
                                {formatAdvisoryType(type)}
                            </span>
                        ))
                    }
                </dd>

                <dt class="fw-semibold mb-1">Category</dt>
                <dd class="mb-3">
                    {
                        frontmatter.category.map((cat) => (
                            <span class="d-inline-flex align-items-center me-3 fw-light small">
                                <i class={`${advisory_icons[cat] || "fa-solid fa-cogs"} me-1 text-primary`} />
                                {formatAdvisoryCategory(cat)}
                            </span>
                        ))
                    }
                </dd>

                {
                    metadataItems.length > 0 && (
                        <>
                            <dt class="fw-semibold mb-1">Technical Details</dt>
                            <dd class="mb-3">
                                {metadataItems.map((item) => (
                                    <span class="d-inline-flex align-items-center me-3 fw-light small">
                                        <i class={`fas ${item.icon} me-1 text-primary`} />
                                        {item.label}: {item.value}
                                    </span>
                                ))}
                            </dd>
                        </>
                    )
                }
            </dl>
        </div>

        <div class="border rounded p-3">
            {
                frontmatter.reporter && (
                    <div class="mb-3">
                        <dt class="fw-semibold mb-2">Reported by</dt>
                        <dd class="d-flex flex-wrap gap-2 mb-0">
                            {frontmatter.reporter.map((reporter) => {
                                const info = getReporterInfo(reporter);
                                return (
                                    <div>
                                        <GitHubProfilePictureExtended
                                            client:load
                                            username={info.username}
                                            affiliation={info.affiliation}
                                            size={45}
                                            wrapperClasses="advisory-profile"
                                            labelClasses="d-none"
                                        />
                                    </div>
                                );
                            })}
                        </dd>
                    </div>
                )
            }
            {
                frontmatter.reviewer && (
                    <div>
                        <dt class="fw-semibold mb-2">Reviewed by</dt>
                        <dd class="d-flex flex-wrap gap-2 mb-0">
                            {frontmatter.reviewer.map((reviewer) => {
                                const info = getReviewerInfo(reviewer);
                                return (
                                    <div>
                                        <GitHubProfilePictureExtended
                                            client:load
                                            username={info.username}
                                            affiliation={info.affiliation}
                                            size={45}
                                            wrapperClasses="advisory-profile"
                                            labelClasses="d-none"
                                        />
                                    </div>
                                );
                            })}
                        </dd>
                    </div>
                )
            }
        </div>
    </div>
</div>

<style lang="scss">
    .advisory-header {
        .badge {
            font-size: 0.875rem;
            padding: 0.35em 0.65em;
            font-weight: 500;
        }

        :global(.advisory-profile) {
            .btn {
                padding: 0;
                border: none;
                background: none;

                &:hover {
                    transform: scale(1.05);
                    transition: transform 0.2s ease-in-out;
                }
            }

            img {
                border-radius: 50%;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
        }
    }
</style>
