---
import ExportAdvisoryButton from "@components/advisories/ExportAdvisoryButton.svelte";
import LocalDateTime from "@components/events/LocalDateTime.svelte";
import { advisories_type_classes, advisories_type_icons } from "./advisoryTypes";

const { frontmatter } = Astro.props;
const publishedDate = frontmatter.publishedDate;
const category = frontmatter.category;
const type = frontmatter.type;
const severity = frontmatter.severity;

function getLinkIcon(link) {
    if (/^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/gi.test(link)) {
        return "fab fa-youtube";
    } else if (/^(https?:\/\/)?(www\.)?zoom\.us\/.+$/gi.test(link)) {
        return "fab fa-zoom-us";
    } else if (/^(https?:\/\/)?(www\.)?bilibili\.com\/.+$/gi.test(link)) {
        return "fab fa-bilibili";
    } else if (/^(https?:\/\/)?(www\.)?github\.com\/.+$/gi.test(link)) {
        return "fab fa-github";
    } else if (/^(https?:\/\/)?(www\.)?linkedin\.com\/.+$/gi.test(link)) {
        return "fab fa-linkedin";
    } else if (/^(https?:\/\/)?(www\.)?twitter\.com\/.+$/gi.test(link)) {
        return "fab fa-twitter";
    } else if (/^(https?:\/\/)?(www\.)?(docs\.google\.com)\/.+$/gi.test(link)) {
        return "fab fa-google-drive";
    } else if (/^(https?:\/\/)?(www\.)?(slideshare\.net)\/.+$/gi.test(link)) {
        return "fab fa-slideshare";
    }

    return "fas fa-link";
}

function getSeverityClass(severity) {
    return `text-${advisories_type_classes[severity] || 'secondary'}`;
}

function getTypeIcon(type) {
    return advisories_type_icons[type] || 'fa-circle-info';
}
---

<div class="">
    <div class="row row-cols-1 row-cols-md-2">
        <div class="col">
            <dl>
                <dt>Published:</dt>
                <dd><LocalDateTime date={publishedDate} client:visible /></dd>
                <dt>Severity:</dt>
                <dd>
                    <span class={getSeverityClass(severity)}>
                        <i class={`fa-solid ${getTypeIcon(type)} me-1`} />
                        {severity.charAt(0).toUpperCase() + severity.slice(1)}
                    </span>
                </dd>
                <dt>Type:</dt>
                <dd>
                    {type.map((t) => (
                        <span class="badge bg-secondary me-1">
                            {t.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
                        </span>
                    ))}
                </dd>
                <dt>Category:</dt>
                <dd>
                    {category.map((c) => (
                        <span class="badge bg-primary me-1">
                            {c.charAt(0).toUpperCase() + c.slice(1)}
                        </span>
                    ))}
                </dd>
            </dl>

            {
                !frontmatter.hideExportButton && (
                    <ExportAdvisoryButton frontmatter={frontmatter} add_class="btn-outline-light col" client:idle />
                )
            }
        </div>
        <div class="col">
            <dl>
                {
                    frontmatter.pipelines && frontmatter.pipelines.length > 0 && (
                        <>
                            <dt>Affected Pipelines:</dt>
                            <dd>
                                <ul class="list-unstyled">
                                    {frontmatter.pipelines.map((pipeline) => (
                                        <li>
                                            {typeof pipeline === 'string' ? (
                                                <a href={`https://github.com/nf-core/${pipeline}`} target="_blank" class="text-white">
                                                    {pipeline}
                                                </a>
                                            ) : (
                                                <div>
                                                    <a href={`https://github.com/nf-core/${pipeline.name}`} target="_blank" class="text-white">
                                                        {pipeline.name}
                                                    </a>
                                                    <span class="ms-2">
                                                        Versions: {pipeline.versions.join(', ')}
                                                    </span>
                                                </div>
                                            )}
                                        </li>
                                    ))}
                                </ul>
                            </dd>
                        </>
                    )
                }
                {
                    frontmatter.modules && frontmatter.modules.length > 0 && (
                        <>
                            <dt>Affected Modules:</dt>
                            <dd>
                                <ul class="list-unstyled">
                                    {frontmatter.modules.map((module) => (
                                        <li>
                                            <a href={`https://github.com/nf-core/modules/tree/master/modules/${module}`} target="_blank" class="text-white">
                                                {module}
                                            </a>
                                        </li>
                                    ))}
                                </ul>
                            </dd>
                        </>
                    )
                }
                {
                    frontmatter.subworkflows && frontmatter.subworkflows.length > 0 && (
                        <>
                            <dt>Affected Subworkflows:</dt>
                            <dd>
                                <ul class="list-unstyled">
                                    {frontmatter.subworkflows.map((subworkflow) => (
                                        <li>
                                            <a href={`https://github.com/nf-core/modules/tree/master/subworkflows/${subworkflow}`} target="_blank" class="text-white">
                                                {subworkflow}
                                            </a>
                                        </li>
                                    ))}
                                </ul>
                            </dd>
                        </>
                    )
                }
                {
                    frontmatter.configuration && frontmatter.configuration.length > 0 && (
                        <>
                            <dt>Affected Configuration:</dt>
                            <dd>
                                <ul class="list-unstyled">
                                    {frontmatter.configuration.map((config) => (
                                        <li>{config}</li>
                                    ))}
                                </ul>
                            </dd>
                        </>
                    )
                }
                {
                    frontmatter.references && frontmatter.references.length > 0 && (
                        <>
                            <dt>References:</dt>
                            <dd>
                                <ul class="list-unstyled">
                                    {frontmatter.references.map((ref) => (
                                        <li>
                                            <a href={ref.url} target="_blank" class="text-white">
                                                {ref.title}
                                            </a>
                                            {ref.description && (
                                                <span class="ms-2 text-muted">- {ref.description}</span>
                                            )}
                                        </li>
                                    ))}
                                </ul>
                            </dd>
                        </>
                    )
                }
            </dl>
        </div>
    </div>

    <div class="d-flex justify-content-center justify-content-md-start"></div>
</div>
<style lang="scss">
    .dropdown-menu {
        z-index: 100;
    }
</style>
