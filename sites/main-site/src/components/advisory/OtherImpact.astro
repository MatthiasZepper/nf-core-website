---
interface Props {
    items: string[];
    title: string;
    icon: string;
    urlPrefix: string;
}

const { items, title, icon, urlPrefix } = Astro.props;
const sectionId = `impact-${Math.random().toString(36).substring(2, 9)}`;
---

<div class="collapsible-section">
    <button
        class="collapse-button"
        aria-expanded="true"
        aria-controls={sectionId}
        data-bs-toggle="collapse"
        data-bs-target={`#${sectionId}`}
    >
        <h3 class="h5 mb-2">
            <i class={`fas ${icon} me-2`}></i>
            {title}
        </h3>
    </button>
    <div id={sectionId} class="collapse show">
        <ul class="list-unstyled mb-0">
            {
                items.map((item) => (
                    <li class="impact-item">
                        <a href={`${urlPrefix}/${item}`} class="text-decoration-none">
                            : {item}
                        </a>
                    </li>
                ))
            }
        </ul>
    </div>
</div>

<style lang="scss">
    .collapsible-section {
        .collapse-button {
            background: none;
            border: none;
            padding: 0.75rem;
            color: var(--bs-body-color);
            font-weight: 500;
            display: flex;
            align-items: center;
            width: 100%;
            text-align: left;
            cursor: pointer;
            transition: all 0.2s ease;
            border-radius: 0.375rem;
            margin-bottom: 0.5rem;

            &:hover {
                color: var(--bs-primary);

                h3 {
                    color: var(--bs-primary);
                }
            }

            h3 {
                margin: 0;
                transition: color 0.2s ease;
                display: flex;
                align-items: center;
                width: 100%;
            }

            i {
                transition: all 0.2s ease;
                margin-right: 0.5rem;
            }

            &[aria-expanded="false"] {
                i {
                    transform: rotate(-90deg);
                }
            }
        }

        .collapse {
            transition: all 0.2s ease-in-out;
        }
    }

    .impact-item {
        margin-bottom: 0.75rem;
        padding-left: 1rem;
        display: flex;
        align-items: center;
        &:last-child {
            margin-bottom: 0;
        }

        a {
            display: block;
            padding: 0.4rem 0.6rem;
            color: var(--bs-body-color);
            font-size: 0.95rem;
            transition: all 0.2s ease;
            flex-grow: 1;

            &:hover {
                background-color: var(--bs-tertiary-bg);
                color: var(--bs-primary);
                text-decoration: none;
            }
        }
    }
</style>

<script>
    // Handle the collapse button text update
    document.querySelectorAll(".collapse-button").forEach((button) => {
        button.addEventListener("click", () => {
            const isExpanded = button.getAttribute("aria-expanded") === "true";
            const span = button.querySelector("span");
            if (span) {
                span.textContent = isExpanded ? "Show affected items" : "Hide affected items";
            }
        });
    });
</script>
