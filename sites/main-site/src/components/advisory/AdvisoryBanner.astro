---
import AdvisoryBannerElement from "@components/advisories/AdvisoryBannerElement.svelte";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { markdown } from "@astropub/md";

let advisories: CollectionEntry<"advisories">[] = await getCollection("advisories");
advisories = await Promise.all(
    advisories.map(async (advisories) => {
        advisories.data.subtitle = `${await markdown(advisories.data.subtitle)}`;
        return advisories;
    }),
);
let now = new Date().getTime();
advisories = advisories.sort((a, b) => {
    if (!a.data.publishDate || !b.data.publishDate) return 0;
    return b.data.publishDate.getTime() - a.data.publishDate.getTime();
});

advisories = advisories.filter((advisories) => {
    return advisories.id.split("/").length === 2;
});
const currentAdvisory = advisories.filter((advisories) => {
    // Calculate date 3 months ago
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
    const threeMonthsAgoTime = threeMonthsAgo.getTime();

    // Check if advisory was published within the last 3 months
    const publishDateUnix = advisories.data.publishDate?.getTime();

    if (publishDateUnix && publishDateUnix >= threeMonthsAgoTime) {
        return true;
    }
});

const advisories_type_classes = {
    known_regression: "success",
    incompatibility: "warning",
    security: "alert",
    performance: "success",
    data_corruption: "primary",
    scientific_advice: "secondary",
    other: "secondary",
};
const advisories_type_icons = {
    known_regression: "fa-solid fa-bug",
    incompatibility: "fa-solid fa-exclamation-triangle",
    security: "fa-solid fa-shield-alt",
    performance: "fa-solid fa-tachometer-alt",
    data_corruption: "fa-solid fa-database",
    scientific_advice: "fa-solid fa-microscope",
    other: "fa-solid fa-info-circle",
};
---

{
    currentAdvisory.length > 0 && (
        <div>
            <div class="current-advisories-container bg-body-secondary">
                <AdvisoryBannerElement
                    advisories_time_category={"ongoing"}
                    advisories={currentAdvisory}
                    {advisories_type_classes}
                    {advisories_type_icons}
                    client:load
                />
            </div>
            <div class="triangle-down bg-body-secondary d-none " />
        </div>
    )
}
<style lang="scss">
    @import "@styles/_variables.scss";
    .current-advisories-container:has(.ongoing-advisories) ~ .triangle-down {
        display: block !important;
    }

    @include media-breakpoint-down(md) {
        .mainpage-subheader-heading {
            padding-top: 2rem;
        }
    }
</style>
